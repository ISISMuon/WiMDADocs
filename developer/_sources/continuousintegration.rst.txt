============================
WiMDA Continuous Integration
============================

These notes are aimed at WiMDA developers and explain how some of the tooling around the WiMDA software operates. They explain how to use the tooling and workflows as they are currently set up and they then go on to explain how the tools have been set up in case modifications are required to the configuration.

GitHub repository
#################

The WiMDA GitHub repository has been configured to normalize line endings on pushing code up to the repository via the ``text=auto`` configuration in the .gitattributes file.
Since the Delphi source code can only compiled on Windows this is arguably overkill but it is commonly done on GitHub repositories so has been repeated here.

The Delphi form units (.dfm) have all been configured as text to support generating diff's between versions of these files.
There is some variation in the tags written to the .dfm files by different versions of Delphi and so these files can be subject to unexpected changes when the associated code unit is changed eg very small changes in widgets position or dimensions.

WiMDA build machine
###################

The WiMDA build machine is ``wimdabuildserv``. It is a Windows virtual machine on the ISIS Hyper-V virtual infrastructure with Delphi Professional installed and Inno Setup installed on it.

A user account called ``WimdaBuildUser`` has been set up to run various build actions (see GitHub actions below) and it is also possible to login to the machine as this user.

Note: the free Community licence for Delphi doesn't include the command line compiler at the time of writing so the build machine uses a Delphi Professional licence. The terms of the Delphi licences are such that the build machine doesn't require its own dedicated licence. The licence of an interactive user can be reused.

Note: if the Delphi IDE needs to be updated it may need to be opened up when interactively logged in as WimdaBuildUser before the command line compiler works. This was necessary after the initial Delphi install. Opening up the Delphi IDE creates a EnvOptions.proj file in ``C:\Users\<user id>\AppData\Roaming`` that the command line compiler requires.

GitHub Actions Configuration
############################

Two GitHub actions workflows have been set up:

- Generate release
- Process pull request

.. image:: screenshots/GitHubActions.PNG

The Wimda build machine has been configured as a self-hosted runner to execute the workflows. The runner operates via a Windows service called "GitHub Actions Runner" that picks up processing tasks when GitHub detects user actions relating to the workflows (see description of individual workflows for more details). 

In addition to responding automatically to certain trigger events, both jobs can be run manually from the GitHub web site for the repository. This is achieved by setting the workflow to respond to ``workflow_dispatch`` events.

The details of the workflows are stored in .yml files in the ``.github\workflows`` folder.

Generate Release Package
------------------------

This job is typically run manually from the GitHub user interface but it can also be triggered automatically when a tag is pushed to GitHub. 
A git tag can be created using a command like ``git tag -a v1.3 -m "WiMDA version 1.3"`` and pushed using ``git push -u origin v1.3``. The job performs the following steps:

Build Source Code
*****************

The code is built using the msbuild command line compiler. The ``Release`` configuration and the ``Win32`` platform are currently selected as the options for the build.

Create zip file of executables
******************************

A zip file is created containing all .exe files (with the exception of WimdaTest.exe) and .dll files generated by the build

Create installers
*****************

Installers for a 32 bit and a 64 bit build of WiMDA are created using the Inno Setup installer tool. This step downloads the installers for a specific version of GLE and Ghostscript from the vendors' websites.

Release created in GitHub
*************************

A draft release is created in GitHub using either the tag name pushed or (if the job was initiated via the GitHub UI) the version label supplied. This can be viewed at https://github.com/ISISMuon/WiMDA/releases.
The release will have the installers and the zip file of the executables attached to it.

The following changes take place when the draft release is published:

- if the job was initiated via the GitHub UI the tag will be created
- a zip file containing the source code will be created and attached to the release

Process Pull Request
--------------------

This job runs when a pull request is created or when updated code is pushed to an existing pull request. Note that if code is directly pushed to "main" without creating a pull request then these checks will not be performed. The following automated checks are run on the code:

Code Checkout
*************

The changes in the feature branch are merged with the latest code in the main branch and checked out to the build machine.

Check code formatting
*********************

Checks the code is formatted correctly by running a code format process on the source code and checking for any changes made. If the code isn't formatted correctly a git patch file is created containing the required changes
The format rules are applied using the Formatting feature available in the Delphi IDE. The formatting rules are specified in a file called ``Formatter_Wimda.config``. At the time of writing, the checks are a subset of the standard formatting rules including the following:

- standard indent of 2 spaces
- spacing around operators (:=, <, > etc) is standardised
- line length set to 80 characters

Capitalization has not yet been enforced because the formatter was unable to distinguish between the same name used in different contexts in a single code unit eg in Analyse.pas there is a button called FIT and a function called Fit and the formatter aligns the capitalisation of the two.

This can be run manually on the source code on a local machine from the Delphi IDE (via right click menu on an individual unit or project) or by running the batch file ``FormatWimdaCode.bat``

Code build
**********

The code is built on the WiMDA build machine using the msbuild command line compiler. The ``Release`` configuration is used and both a 32 bit and a 64 bit build are generated.

Run system tests
****************

A set of system tests are run on the WiMDA build machine via an executable called WimdaTest.exe covering a range of file load, analyse fit and model fit actions. The WimdaTest.exe executable is a command line version of a DUnit test runner.
